{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    /*------------------------------------------\r\n    --------------------------------------------\r\n    Created constructor\r\n    --------------------------------------------\r\n    --------------------------------------------*/\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.apiURL = 'https://retoolapi.dev/FS6A8s';\n      /*------------------------------------------\r\n      --------------------------------------------\r\n      Http Header Options\r\n      --------------------------------------------\r\n      --------------------------------------------*/\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      /**\r\n       * Write code on Method\r\n       *\r\n       * @return response()\r\n       */\n\n      this.token = \"Some token\";\n    }\n    /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n\n\n    getAll() {\n      return this.httpClient.get(this.apiURL + '/data').pipe(catchError(this.errorHandler));\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    create(post) {\n      const token = this.getToken();\n      return token ? this.httpClient.post(this.apiURL + '/data/', JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler)) : of(false);\n    }\n    /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n\n\n    find(id) {\n      return this.httpClient.get(this.apiURL + '/data/' + id).pipe(catchError(this.errorHandler));\n    }\n    /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n\n\n    update(id, post) {\n      return this.httpClient.put(this.apiURL + '/data/' + id, JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n    /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n\n\n    delete(id) {\n      return this.httpClient.delete(this.apiURL + '/data/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n    /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n\n\n    errorHandler(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}