{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.url = \"https://api-generator.retool.com/iVwX9g\";\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.userData = {\n        emailId: '',\n        password: ''\n      };\n      this.tocken = 0;\n      this.getAll().subscribe(x => {\n        this.userData = x;\n      });\n    }\n\n    getAll() {\n      return this.httpClient.get(this.url + '/data');\n    }\n\n    create(post) {\n      return this.httpClient.post(this.url + '/data/', JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n\n    errorHandler(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n    setTocken() {\n      this.tocken = new Date().getTime();\n      localStorage.setItem('tocken', JSON.stringify(this.tocken));\n    }\n\n    validateUserTocken() {\n      this.tockenDetails = localStorage.getItem('tocken'); //let _tocken = JSON.parse\n\n      if (this.tockenDetails != null) {\n        return true;\n      }\n\n      return false;\n    } //it should be from backend\n\n\n    validateUserDetails(user) {\n      let finalVal = false;\n      console.log(this.userData.length);\n\n      for (let y of this.userData) {\n        if (user.userid == y.userid && user.password == y.password) {\n          return true;\n        } else {\n          this.message = \"Please check your userid and password\";\n        }\n      }\n\n      return finalVal;\n    }\n\n    delete(id) {\n      return this.httpClient.delete(this.url + '/data/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n\n    logout() {\n      localStorage.clear();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}